/*****************************
    FLEXBOX
------------------------------

    CONOCEPTOS BÁSICOS
    ------------------
    La propiedad display define que una caja será flexbox
    de bloque o flexbox de línea.

    display: flex | inline-flex;

    IMPORTANTE: Flexbox es un sistema UNIDIMENSIONAL. Es decir,
    tenemos puras filas o puras columnas. Eso lo va a determinar
    la propiedad flex-direction.
    */

*,
*::before,
*::after {
    box-sizing: border-box;
}

.container {
    background-color: #333;
    height: 30vh;
    width: 100%;

    display: flex;
    display: inline-flex;


    /**********************
    Flujo de Flexbox (flow)

    flex-direction: row;
    --------------------
    Define la dirección del eje principal
    -   row -   Predeterminado. Alinea los elementos horizon-
        talmente (filas).
    -   row-reverse -   Invierte las filas
    -   column -    Alinea los elementos verticalmente (colum-
        nas).
    -   column-reverse -    Invierte las columnas

    flex-wrap: nowrap;
    ------------------
    Define si la caja envuelve o no a sus hijos.
    - nowrap -  Predeterminado. Respeta los tamaños definidos.
                Envía los elementos a la siguiente línea
                (no envuelve a sus hijos).
    - wrap -    Todos los elementos en una sola fila. Si el
                viewport disminuye, se intentará mostrar todos
                los elementos. Sino, agrega una barra de scroll.
    Si el elemento tiene ancho y alto definidos,
    pueden ser ignorados por ser un contenedor
    flexbox. (envuelve a sus hijos).
    */
    
    flex-direction: row;
    flex-direction: row-reverse;
    flex-direction: column;
    flex-direction: column-reverse;

    flex-wrap: wrap;
    flex-wrap: nowrap;
    flex-wrap: wrap-reverse;

/*
    Un shorthand es flex-flow, donde su primer valor es para
    la direccion y el segundo para wrap.
    -   flex-flow: column nowrap;
*/

    flex-flow: row wrap;
    flex-flow: column wrap;

    /******************************************************
    ALINEACIÓN del contenido RESPECTO AL EJE PRINCIPAL
    -------------------------------------------------------
    La alineación es si sobra espacio

    justify-content: start;
    ----------------------
    -start -    Predeterminado, alinea los elementos al comienzo
                del contenedor).
    -center -   Alinea los elementos al centro del contenedor
    -end -  Alinea los elementos al final del contenedor
    -space-between -    Ignora los orillas de la caja contene-
                        dora y los espacios sobrantes se repar-
                        ten entre los elementos hijos. Los ele-
                        mentos son distribuidos en la linea
                        uniformemente.
    -space-around - Los elementos se distribuyen uniformemente
                    en la linea con el mismo espacio alrededor.
    -space-evenly - Los elementos se distribuyen de modo que
                    el espacio entre dos elementos sea igual.
*/

    justify-content: start;
    justify-content: center;
    justify-content: end;
    justify-content: space-between;
    justify-content: space-around;
    justify-content: space-evenly;

    /***************************************
    ALINEACIÓN respecto del EJE TRANSVERSAL
    ----------------------------------------

    align-items: stretch;
    ---------------------
    Alinea cada una de las lineas
    -stretch -  Por defecto, estira hasta llenar el contenedor
                (respeta max-width y max-height.
    -flex-start | start | self-start -   Los elementos se colocan
                                        al principio del eje
                                        transversal. La diferencia
                                        entre estos es sutil y
                                        se trata de respetar las
                                        reglas de flex-direction
                                        y writing-mode.
    -flex-end / end / self-end -    Los elementos se colocan al
                                    final del eje transversal.
                                    Respeta las reglas de
                                    flex-direction y writing-mode.
    -center -   Los elementos están alineados en el eje transversal.
    -baseline - Los elementos están alineados como sus líneas base
                se alinean (base del texto).   
*/

    align-items: stretch;
    align-items: start;
    align-items: end;
    align-items: center;
    align-items: space-between;
    align-items: space-around;
    align-items: space-evenly;

/*
    align-content: normal;
    ----------------------
    Alinea todo el contenido como un todo. No funciona cuando
    los hijos están en una sola línea (wrap: nowrap).

    -normal -   Predeterminado, los articulos se alinean en su posi-
                ción predeterminada.
    -flex-start | start -   los elementos se alinean al inicio del
                            contenedor. flex-start respeta la
                            flex-direction mientras que start
                            respeta writing mode.
    -flex-end | end -   Elementos alineados al final del contenedor.
    -center -   Elementos centrados en el contenedor.
    -space-between -    Elementos distribuidos uniformemente, la
                        primera línea está al principio del conte-
                        nedor, mientras que la última está al final.
    -space-around - Elementos distribuidos uniformemente con el mis-
                    mo espacio alrededor de cada línea.
    -space-evenly - Los elementos se distribuyen uniformemente con
                    el mismo espacio a su alrededor.
    -stretch -  las líneas se estiran para ocupar el espacio restante.
*/

    align-content: stretch;
    align-content: normal;
    align-content: flex-start;
    align-content: start;
    align-content: flex-end;
    align-content: end;
    align-content: center;
    align-content: space-between;
    align-content: space-around;
    align-content: space-evenly;

    /*
        Reiniciando valores de Flexbox
        ------------------------------
    */
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    flex-flow: row nowrap;
    justify-content: flex-start;
    align-items: stretch;
    align-content: flex-start;
}

.item {
    background-color: #666;
    border: medium solid #999;
    /* width: 100px; */

    /********************
    Factor de Crecimiento
    ---------------------
    
    flex-grow: 0;
    ---------
    Define la capacidad de crecimiento de un elemento
    flexible si es necesario. Acepta un valor sin unidades
    que sirve como proporción. Determina qué cantidad de
    espacio disponible dentro del contenedor flexible debe
    ocupar el elemento.
    
    Si todos los elementos flex-grow se han establecido en 1,
    el espacio restante del contenedor se distribuirá por 
    igual a todos los hijos. Si uno de los hijos tiene un
    valor de 2, ese hijo ocuparía el doble de espacio que
    cualquiera de los otros (o lo intentará, al menos).
    
    Los números negativos no son válidos.

        Por ejemplo, si el contenedor tiene un width: 1000px
        y tenemos 3 elementos de con un width: 100px c/u, el
        espacio sobrante es de 700px.
        Ahora, si los elementos tienen un flex-grow: 1, esto
        significa que el espacio de 700px se va a distribuir
        entre los 3 elementos. Esto es 700px/3 = 233.3px c/u.

        Si uno de los elementos tiene un flex-grow: 2, esto
        significa que 700px/4 = 175px; 175px*2 = 350px. Esto
        significa que de esos 700px, un elemento obtendrá 350
        mientras que los otros dos obtendrán 175px.

        Como resultado final, 2 elementos tendrán un width de
        275px y el restante tendrá un width de 450px (cada
        elemento tenía un width: 100px inicialmente).

    ---------------------------------------------------------
    
    flex-shrink: 1;
    -----------
    Esto define la capacidad para que un elemento se encoja
    si es necesario. Esto es, cuando la caja contenedora ya
    no tenga espacio sobrante.
    
    Los números negativos no son válidos.

        Por ejemplo, si seteamos que los elementos tengan un
        flex-shrink: 0, los elementos dejarán de encogerse,
        por lo tanto si encogemos el viewport, éstos manten-
        drán su tamaño y se generará una barra de scroll.

        Si, en cambio, seteamos que un elemento tenga un
        flex-shrink: 2, dicho elemento se encogerá el doble
        que los elementos restantes a la hora de encoger el
        viewport. Esto es por ejemplo:
            width original contenedor: 239.1px
            width resultante contenedor: 225px

            width reducido contenedor: 14.31px

            width original de 3 elementos: 79.77px

            un elemento tiene flex-shrink:2

            width reducido de 2 elementos: 3.57px
            width reducido elemento restante: 3.57px*2

            width resultante de 2 elementos: 76.2px
            width resultante elemento restante: 72.63px
    ---------------------------------------------------------
    
    flex-basis: auto;
    ----------
    Esto define el tamaño por defecto de un elemento antes de
    que el espacio restante sea distribuído. Puede ser una
    longitud (20%, 5rem, etc.) o una keyword. La keyword auto
    significa "mira a mi propiedad de anchura o altura".
    -   si la caja flexbox tiene dirección de fila, flex-basis
        representa el width.
    -   si la caja flexbox tiene direccion de columna,
        flex-basis representa el height.
    
    Para flexbox, flex-basis tiene mayor especificidad que
    width o height.

        Por ejemplo:
        .container {
            flex-flow: row nowrap;
        }

        .item {
            flex-basis: 100px
        }

        El elemento tendrá un width de 100 px.

        .container {
            flex-flow: column nowrap;
        }

        .item {
            flex-basis: 100px;
        }

        El elemento tendrá un height de 100px.
    ---------------------------------------------------------
    */

    flex-grow: 0;
    flex-shrink: 1;
    flex-basis: auto;

    /*SHORTHAND*/
    flex: 0 1 auto;
}

/* 
.item:nth-child(2) {
    flex-grow: 2;
} 
*/

/* 
.item:nth-child(2),
.item:nth-child(16) {
    font-size: 250%;
} 
*/